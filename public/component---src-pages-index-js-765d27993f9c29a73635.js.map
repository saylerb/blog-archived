{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["IndexPage","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","gatsby__WEBPACK_IMPORTED_MODULE_2__","query","render","data","allMarkdownRemark","edges","map","edge","key","node","id","frontmatter","date","to","path","title","_public_static_d_660436437_json__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","_ref","staticQueryData","finalData","Fragment","props","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","Layout","Helmet_default","site","siteMetadata","meta","name","content","lang","header","paddingTop","_755544856"],"mappings":"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","file":"component---src-pages-index-js-765d27993f9c29a73635.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nconst IndexPage = () => (\n  <Layout>\n    <p>Welcome to my personal site!</p>\n    <StaticQuery\n      query={graphql`\n        query BlogPostQuery {\n          allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: ASC }\n            filter: { frontmatter: { published: { eq: true } } }\n          ) {\n            edges {\n              node {\n                id\n                frontmatter {\n                  path\n                  title\n                  date\n                }\n                excerpt\n                timeToRead\n                html\n              }\n            }\n          }\n        }\n      `}\n      render={data => {\n        return (\n          <ul>\n            {data.allMarkdownRemark.edges.map(edge => {\n              return (\n                <li key={edge.node.id}>\n                  <span>{edge.node.frontmatter.date} </span>\n                  <Link to={edge.node.frontmatter.path}>\n                    {edge.node.frontmatter.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        );\n      }}\n    />\n  </Layout>\n);\n\nexport default IndexPage;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: \"rebeccapurple\",\n      marginBottom: \"1.45rem\"\n    }}\n  >\n    <div\n      style={{\n        margin: \"0 auto\",\n        maxWidth: 960,\n        padding: \"1.45rem 1.0875rem\"\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: \"white\",\n            textDecoration: \"none\"\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nimport Header from \"./header\";\nimport \"./layout.css\";\n\nconst Layout = ({ children, data }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: \"description\", content: \"Sample\" },\n            { name: \"keywords\", content: \"sample, something\" }\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: \"0 auto\",\n            maxWidth: 960,\n            padding: \"0px 1.0875rem 1.45rem\",\n            paddingTop: 0\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Layout;\n"],"sourceRoot":""}