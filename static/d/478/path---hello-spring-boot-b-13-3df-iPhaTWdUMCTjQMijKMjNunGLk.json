{"data":{"markdownRemark":{"html":"<p>Most of this will walk you through\nMost of this is based on <a href=\"http://spring.io/guides/gs/rest-service/#\">the official Spring guide to building a REST\nservice.</a> I'm someone who likes to\nknow what every line of configuration is doing, so I've added some more detail\ncompared to the official guides. I hope some people find this useful!</p>\n<p>Create a directory called <code class=\"language-text\">hello-spring</code> and cd into that directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> hello-spring <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cd</span> hello-spring</code></pre>\n      </div>\n<p>Create the Maven-like directory structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p src/main/java/main/hello</code></pre>\n      </div>\n<p>We'll use Gradle as our buildtool. We'll create a file called <code class=\"language-text\">build.gradle</code>.\nThis will help us with building our application and managaging dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> build.gradle</code></pre>\n      </div>\n<p>At the top of the file create this block:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovey\">\n      <pre class=\"language-groovey\"><code class=\"language-groovey\">buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE&quot;)\n    }\n}</code></pre>\n      </div>\n<p>The\n<a href=\"https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:build_script_external_dependencies\"><code class=\"language-text\">buildscript</code></a>\nblock allows us to add external dependencies to our class path <em>that we can use\nlater in the <code class=\"language-text\">build.gradle</code> file</em>.  Without this <code class=\"language-text\">buildscript</code> block, we only\nhave access to stuff that comes with gradle out of the box (more info\n<a href=\"https://stackoverflow.com/questions/17773817/purpose-of-buildscript-block-in-gradle\">here</a>).</p>\n<p>Within that method we can use the <code class=\"language-text\">repositories</code> method to specify specific\nexternal source for packages.  See <a href=\"https://docs.gradle.org/current/userguide/declaring_repositories.html\">declaring\nrepositories</a>.</p>\n<p>We use <code class=\"language-text\">dependencies</code> method to declare a dependency for a configuration. Here\nwe've defined the <a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/\">Spring Boot Gradle\nplugin</a>\nas a dependency. This contains some useful features, for example bundling up\nall the jars on the classpath into a single jar for convenience, searching for\n<code class=\"language-text\">public static void main()</code> method to flag as a runnable class, and a\ndependency manager. <a href=\"http://spring.io/guides/gs/rest-service/#_create_the_directory_structure\">More details\nhere.</a></p>\n<p>Next, we're going to add a bunch of plugins. This is using a <a href=\"https://docs.gradle.org/current/userguide/plugins.html#sec:old_plugin_application\">legacy plugin\napplication\nsyntax</a>\nin place of a new plugin DSL.</p>\n<p>In this case, using <code class=\"language-text\">apply plugin: &#39;java&#39;</code> syntax will apply the\n<a href=\"https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPlugin.html\"><code class=\"language-text\">JavaPlugin</code></a>,\nwhich allows Gradle to compile Java source files and produce an executable <em>jar</em> file.</p>\n<p>The <code class=\"language-text\">apply plugin: &#39;eclipse&#39;</code> and <code class=\"language-text\">apply plugin: &#39;idea&#39;</code> lines apply the editor\nplugins.  For example, the <a href=\"https://docs.gradle.org/current/userguide/idea_plugin.html\">IntelliJ\nplugin</a>.</p>\n<p>And finally we're adding the Spring Boot plugin and <a href=\"https://docs.spring.io/dependency-management-plugin/docs/current-SNAPSHOT/reference/html5/\">Spring Dependency\nmanagement\nplugins</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE&quot;)\n    }\n}\n\napply plugin: &#39;java&#39;\napply plugin: &#39;eclipse&#39;\napply plugin: &#39;idea&#39;\napply plugin: &#39;org.springframework.boot&#39;\napply plugin: &#39;io.spring.dependency-management&#39;</code></pre>\n      </div>\n<p>What is this part? bootJar? In Spring Boot 2.x, the <code class=\"language-text\">bootJar</code> task creates the\nexecutable <em>jar</em> file. When the <code class=\"language-text\">java</code> plugin is applied along with the Spring\nBoot Gradle plugin, the Spring boot plugin <em>responds</em> by creating the <code class=\"language-text\">bootJar</code>\ntask, along with <code class=\"language-text\">bootRun</code>, which allows us to run the app directly. (more info\n<a href=\"https://www.baeldung.com/spring-boot-gradle-plugin\">here</a>).  The <code class=\"language-text\">baseName</code>\nand <code class=\"language-text\">version</code> allow us to set the <em>jar</em> filename.</p>\n<p>Now you'll see another instance of the <code class=\"language-text\">repositories</code> and <code class=\"language-text\">dependencies</code>\nmethods. What's the difference between these the ones we previously saw inside\nthe <code class=\"language-text\">buildscript</code> block?</p>\n<p>The <code class=\"language-text\">repositories</code> and <code class=\"language-text\">dependencies</code> previously was scoped to the\n<code class=\"language-text\">buildscript</code>, which was for specifying dependencies for this file itself, but\nnot for building and running our application. This <code class=\"language-text\">repositories</code> and\n<code class=\"language-text\">dependencies</code> sections are at the global level, so they are for our\napplication. Within the dependencies block, we declare <code class=\"language-text\">compile</code> an external\ndependency for building our application. The <code class=\"language-text\">spring-boot-starter-web</code> is a\ndependency that bundles together many dependencies for building a RESTful web\napplication. For example, it adds a Tomcat server and Spring MVC, so everything\nwe need to start writing a RESTful API. </p>\n<p>We also declare <code class=\"language-text\">spring-boot-starter-test</code> as a <code class=\"language-text\">testCompile</code> dependency to\ngive us some useful libraries for testing our app, including <code class=\"language-text\">JUnit</code>,\n<code class=\"language-text\">AssertJ</code>, <code class=\"language-text\">Hamcrest</code>, <code class=\"language-text\">Mockito</code> and <code class=\"language-text\">MockMvc</code>.</p>\n<p>Next we have <code class=\"language-text\">sourceCompatibility</code> and <code class=\"language-text\">targetCompatibility</code>.  What's the\n<a href=\"https://stackoverflow.com/questions/16654951/gradle-sourcecompatibility-vs-targetcompatibility\">difference</a>?\n<a href=\"https://discuss.gradle.org/t/sourcecompatibility-targetcompatibility-usage-reasons/25133/4\">This post is a good explaination</a>\n<code class=\"language-text\">sourceCompatibility</code> declares the version of Java your source code is\ncompatible with, which tells the compiler how to handle parsing your code,\nwhile <code class=\"language-text\">targetCompatibility</code> tells the compiler what version of bytecode to\nproduce. Most of the time, these two should be the same.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">bootJar {\n    baseName = &#39;gs-spring-boot&#39;\n    version =  &#39;0.1.0&#39;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile(&quot;org.springframework.boot:spring-boot-starter-web&quot;)\n    testCompile(&quot;junit:junit&quot;)\n}</code></pre>\n      </div>\n<p>Spring Boot tries to help you with adding and removing </p>","frontmatter":{"path":"/hello-spring-boot","date":"2019-01-07","title":"Hello, Spring Boot"}}},"pageContext":{}}