{"data":{"markdownRemark":{"html":"<h2>Install IntelliJ CE</h2>\n<ul>\n<li>Download IntelliJ Community Edition and copy to Applications folder</li>\n<li>Open, don't import any settings. </li>\n<li>You can skip the rest of the initial configuration process</li>\n</ul>\n<h2>Make sure you have Java Installed</h2>\n<ul>\n<li>I've been using Java 1.8, which is the current version in Long Term Support\nas of this article. Java 8 has most of the modern features that anyone new to\nJava will need.</li>\n<li><a href=\"http://exercism.io/languages/java/installation#mac-os-x\">Exercism has a pretty good page for instructions on\ninstallation</a>. If\nyou want to download an older version of Java, you'll have to make some\nadjustments to the installation instructions. For example, if you want to download\nJava 8 on a Mac with the Homebrew package manager. You can do:</li>\n</ul>\n<pre><code class=\"language-bash\">brew tap caskroom/versions\nbrew cask install java8\n</code></pre>\n<p>See <a href=\"https://stackoverflow.com/questions/24342886/how-to-install-java-8-on-mac\">this StackOverflow post</a> for more details.</p>\n<ul>\n<li>\n<p>You don't need to install Gradle, since IntelliJ has a Gradle wrapper out of\nthe box</p>\n<h2>Create a project</h2>\n</li>\n<li>\n<p>When you open up IntelliJ, there should be a dialog that is open.</p>\n</li>\n<li>\n<p>Select <code>Create a Project</code></p>\n</li>\n<li>\n<p>The Left panel will show different types of projects. Select <code>Gradel</code>.  Gradle is a build tool and dependency manager. Build scripts are written in Groovy, a dynamic langauge that feels like a mix of Ruby and Java. </p>\n</li>\n<li>\n<p>Select your project SDK in the top drop down menu. The version of Java you installed should be there.</p>\n</li>\n<li>\n<p>On the next screen, you'll see GroupID, ArtifactID, and Version. These are maven artifacts (Maven is another build tool that uses an XML configuration file)\nThese aren't that important to us, but we have to fill them out. </p>\n<ul>\n<li>GroupID - usually identifies the organization/team for a particular project. E.g. <code>com.companyname.project</code>. If it's a personal project, you can just use your name. </li>\n<li>ArtifactID - the name to give to your jar without a version number. E.g. <code>MyFirstProject</code>. </li>\n<li>Version - the version number. This would increment with each release if you were distributing the software. e.g. <code>1.0</code></li>\n</ul>\n</li>\n<li>\n<p>On the next screen, make sure to check <code>Create separate module per source set</code>, and <code>Use default gradle wrapper</code>. You can use the Project JVM for Gradle JVM (the same one you specified earlier)</p>\n</li>\n<li>\n<p>On the next screen select the location of the project to save</p>\n</li>\n<li>\n<p>It will prompt you that the file is going to be created by IntelliJ, click yes.</p>\n</li>\n<li>\n<p>Intially, your Gradle build will start syncing.</p>\n</li>\n</ul>\n<h2><code>build.gradle</code></h2>\n<ul>\n<li>In the root of the project, you should see file called <code>build.gradle</code> that was generated for you. Gradle makes it really easy to build your project (compile your Java source files). It can also do many other things, including running your tests, and creating a JAR file containing your classes.  If you're familiar with Ruby, this is like combination between a gem file and rake. The <code>build.gradle</code> file is written in Groovey, a dynamic language that feels like a mix of Java and Ruby. </li>\n<li>If you step into the <code>build.gradle</code>, you'll see that it already has jUnit specified as a dependency, which is great.</li>\n</ul>\n<h2>Things to add to <code>.gitignore</code></h2>\n<p>A simple gitignore for this project could be </p>\n<pre><code>.idea/\nbuild\n.gradle\n!gradle-wrapper.jar\n</code></pre>\n<ul>\n<li>Ignoring the <code>.idea/</code> directory is optional. JetBrains would probably reccomend publishing it, because it contains metadata about your IDE setup which can be useful for others working on the same team. In this case, I don't need to share  IDE configuration, so I'm choosing to tell git to ignore it.</li>\n<li>Ignore the <code>build</code> directory. This is where gradle will put the compiled Java classes. Since anyone who downloads your source code can build the project themselves, there's no need to publish this directory.</li>\n<li>Ignore the <code>.gradle</code> directory. </li>\n<li>Don't ignore the gradle-wrapper.jar. This can allow anyone to pull the project down and build without having to install gradle manually themselves.</li>\n</ul>\n<h2>Basic directory structure</h2>\n<p>By default, Gradle expects the following directory structure:</p>\n<pre><code>src\n├── main\n│   └── java\n│       └── hello\n│           └── Hello.java\n└── test\n    └── java\n        └── hello\n            └── HelloTest.java\n</code></pre>","frontmatter":{"path":"/set-up-a-new-intellj-project-with-gradle","title":"How to set up a new IntelliJ project with Gradle"}}},"pageContext":{}}